{"remainingRequest":"E:\\test_platform_vue\\node_modules\\thread-loader\\dist\\cjs.js!E:\\test_platform_vue\\node_modules\\babel-loader\\lib\\index.js!E:\\test_platform_vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\test_platform_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\test_platform_vue\\src\\components\\page\\uiTestCase\\addOrEditUiTestCase.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\test_platform_vue\\src\\components\\page\\uiTestCase\\addOrEditUiTestCase.vue","mtime":1632633660583},{"path":"E:\\test_platform_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\test_platform_vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\test_platform_vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"E:\\test_platform_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\test_platform_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}