{"remainingRequest":"E:\\test-platform-vue\\node_modules\\thread-loader\\dist\\cjs.js!E:\\test-platform-vue\\node_modules\\babel-loader\\lib\\index.js!E:\\test-platform-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\test-platform-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\test-platform-vue\\src\\components\\page\\performanceScript\\newPerformanceReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\test-platform-vue\\src\\components\\page\\performanceScript\\newPerformanceReport.vue","mtime":1651031321559},{"path":"E:\\test-platform-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650008434508},{"path":"E:\\test-platform-vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1650008440786},{"path":"E:\\test-platform-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1650008434007},{"path":"E:\\test-platform-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650008434508},{"path":"E:\\test-platform-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1650008440984}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IG5ld1BlcmZvcm1hbmNlU2NyaXB0UmVwb3J0UmVxdWVzdCwgcGVyZm9ybWFuY2VTY3JpcHRSZXBvcnRSZXF1ZXN0IH0gZnJvbSAiLi4vLi4vLi4vYXBpL3BlcmZvcm1hbmNlU2NyaXB0IjsKaW1wb3J0ICogYXMgZWNoYXJ0cyBmcm9tICdlY2hhcnRzJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICduZXdQZXJmb3JtYW5jZVJlcG9ydC52dWUnLAogIHByb3BzOiBbJ3BlcmZvcm1hbmNlU2NyaXB0UmVwb3J0RGF0YScsICdwZXJmb3JtYW5jZVNjcmlwdElkJ10sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNoYXJ0TGlzdDogW3t9XSwKICAgICAgY2hhcnRMaXN0MjogW3t9XSwKICAgICAgcmVwb3J0X2RpYWxvZzogZmFsc2UsCiAgICAgIHJlcG9ydF9kYXRhOiBbXSwKICAgICAgY2hlY2tfZGF0YTogW10sCiAgICAgIHRhYmxlRGF0YTogW3sKICAgICAgICByZXBvcnRfbGlzdDogW3sKICAgICAgICAgIHRlc3RfcmVwb3J0X25hbWU6ICcnLAogICAgICAgICAgcmVxdWVzdHNfbGFiZWw6ICcnLAogICAgICAgICAgc2FtcGxlczogJycsCiAgICAgICAgICBhcGlfZXJyb3I6ICcnLAogICAgICAgICAgYXBpX21pbjogJycsCiAgICAgICAgICBhcGlfbWF4OiAnJywKICAgICAgICAgIGFwaV9tZWRpYW46ICcnLAogICAgICAgICAgYXBpXzkwOiAnJywKICAgICAgICAgIGFwaV85NTogJycsCiAgICAgICAgICBhcGlfOTk6ICcnLAogICAgICAgICAgYXBpX3RyYW5zYWN0aW9uczogJycsCiAgICAgICAgICBhcGlfcmVjZWl2ZWQ6ICcnLAogICAgICAgICAgYXBpX2F2ZXJhZ2U6ICcnLAogICAgICAgICAgcHJlc3N1cmVfdGVzdF9jb250ZW50OiAnJwogICAgICAgIH1dCiAgICAgIH1dLAogICAgICBwZXJmb3JtYW5jZVJlcG9ydFNjcmlwdElkOiAiIiwKICAgICAgcGVyZm9ybWFuY2VfcmVwb3J0X2lkX2RhdGE6IHt9CiAgICB9OwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHRoaXMuZ2V0UGVyZm9ybWFuY2VSZXBvcnRGdW4oKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXRDaGFydDogZnVuY3Rpb24gaW5pdENoYXJ0KCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5jaGFydExpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsLCBpbmRleCkgewogICAgICAgIHZhciBteUNoYXJ0ID0gX3RoaXMuJGVjaGFydHMuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY2hhcnQiLmNvbmNhdChpbmRleCkpLCAnZGFyaycpOwoKICAgICAgICBteUNoYXJ0LnNldE9wdGlvbihfdGhpcy5jaGFydExpc3RbaW5kZXhdKTsKICAgICAgfSk7CiAgICB9LAogICAgLy8g6I635Y+W5bey6YCJ5oup5oql5ZGKCiAgICBjaGVja19kYXRhX3JlcG9ydDogZnVuY3Rpb24gY2hlY2tfZGF0YV9yZXBvcnQodmFsKSB7CiAgICAgIHRoaXMuY2hlY2tfZGF0YSA9IHZhbDsKICAgIH0sCiAgICAvLyDmiqXlkYrlr7nmr5QKICAgIHJlcG9ydENvbXBhcmVkOiBmdW5jdGlvbiByZXBvcnRDb21wYXJlZCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB0aGlzLnJlcG9ydF9kaWFsb2cgPSBmYWxzZTsKICAgICAgdmFyIGxvYWRpbmcgPSB0aGlzLiRsb2FkaW5nKHsKICAgICAgICBsb2NrOiB0cnVlLAogICAgICAgIHRleHQ6ICdMb2FkaW5nJywKICAgICAgICBzcGlubmVyOiAnZWwtaWNvbi1sb2FkaW5nJywKICAgICAgICBiYWNrZ3JvdW5kOiAncmdiYSgwLCAwLCAwLCAwLjcpJwogICAgICB9KTsKICAgICAgbmV3UGVyZm9ybWFuY2VTY3JpcHRSZXBvcnRSZXF1ZXN0KHRoaXMuY2hlY2tfZGF0YSkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGlmICh0cnVlID09PSBkYXRhLmRhdGEuc3VjY2VzcykgewogICAgICAgICAgX3RoaXMyLnRhYmxlRGF0YSA9IGRhdGEuZGF0YS5kYXRhOwogICAgICAgICAgX3RoaXMyLmNoYXJ0TGlzdDIgPSBkYXRhLmRhdGEuZGF0YTsKICAgICAgICAgIHZhciByZXNwb25zZV90aW1lX3Zhcmllc19vdmVyX3RpbWUgPSBbXTsKCiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzMi5jaGFydExpc3QyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHJlc3BvbnNlX3RpbWVfdmFyaWVzX292ZXJfdGltZS5wdXNoKF90aGlzMi5jaGFydExpc3QyW2ldLnJlc3BvbnNlX3RpbWVfdmFyaWVzX292ZXJfdGltZSk7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXMyLmNoYXJ0TGlzdCA9IHJlc3BvbnNlX3RpbWVfdmFyaWVzX292ZXJfdGltZTsKCiAgICAgICAgICBpZiAoX3RoaXMyLmNoYXJ0TGlzdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIF90aGlzMi4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIF90aGlzMi5pbml0Q2hhcnQoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgbG9hZGluZy5jbG9zZSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpczIuJG1lc3NhZ2UuZXJyb3IoJ+iOt+WPluaOpeWPo+Wksei0pScpOwoKICAgICAgICAgIGxvYWRpbmcuY2xvc2UoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOWFs+mXreaKpeWRiuWIl+ihqAogICAgY2FuY2VsUmVwb3J0TGlzdDogZnVuY3Rpb24gY2FuY2VsUmVwb3J0TGlzdCgpIHsKICAgICAgdGhpcy5yZXBvcnRfZGlhbG9nID0gZmFsc2U7CiAgICB9LAogICAgLy8g5oql5ZGK5YiX6KGoCiAgICByZXBvcnRMaXN0OiBmdW5jdGlvbiByZXBvcnRMaXN0KCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHRoaXMucmVwb3J0X2RpYWxvZyA9IHRydWU7CiAgICAgIHBlcmZvcm1hbmNlU2NyaXB0UmVwb3J0UmVxdWVzdCh0aGlzLnBlcmZvcm1hbmNlUmVwb3J0U2NyaXB0SWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBpZiAodHJ1ZSA9PT0gZGF0YS5kYXRhLnN1Y2Nlc3MpIHsKICAgICAgICAgIF90aGlzMy5yZXBvcnRfZGF0YSA9IGRhdGEuZGF0YS5kYXRhOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpczMuJG1lc3NhZ2UuZXJyb3IoJ+iOt+WPluaOpeWPo+Wksei0pScpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8g6L+U5Zue5oCn6IO96ISa5pys5YiX6KGoCiAgICBwZXJmb3JtYW5jZVJlcG9ydExpc3Q6IGZ1bmN0aW9uIHBlcmZvcm1hbmNlUmVwb3J0TGlzdCgpIHsKICAgICAgdGhpcy4kcGFyZW50LnBlcmZvcm1hbmNlUmVwb3J0TGlzdCgpOwogICAgfSwKICAgIC8vIOiOt+WPlua1i+ivleaKpeWRigogICAgZ2V0UGVyZm9ybWFuY2VSZXBvcnRGdW46IGZ1bmN0aW9uIGdldFBlcmZvcm1hbmNlUmVwb3J0RnVuKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHZhciBsb2FkaW5nID0gdGhpcy4kbG9hZGluZyh7CiAgICAgICAgbG9jazogdHJ1ZSwKICAgICAgICB0ZXh0OiAnTG9hZGluZycsCiAgICAgICAgc3Bpbm5lcjogJ2VsLWljb24tbG9hZGluZycsCiAgICAgICAgYmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC43KScKICAgICAgfSk7CiAgICAgIG5ld1BlcmZvcm1hbmNlU2NyaXB0UmVwb3J0UmVxdWVzdCh0aGlzLnBlcmZvcm1hbmNlU2NyaXB0UmVwb3J0RGF0YSkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGlmICh0cnVlID09PSBkYXRhLmRhdGEuc3VjY2VzcykgewogICAgICAgICAgY29uc29sZS5sb2coZGF0YS5kYXRhLmRhdGEpOwogICAgICAgICAgX3RoaXM0LnRhYmxlRGF0YSA9IGRhdGEuZGF0YS5kYXRhOwogICAgICAgICAgX3RoaXM0LmNoYXJ0TGlzdDIgPSBkYXRhLmRhdGEuZGF0YTsKICAgICAgICAgIHZhciByZXNwb25zZV90aW1lX3Zhcmllc19vdmVyX3RpbWUgPSBbXTsKCiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IF90aGlzNC5jaGFydExpc3QyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHJlc3BvbnNlX3RpbWVfdmFyaWVzX292ZXJfdGltZS5wdXNoKF90aGlzNC5jaGFydExpc3QyW2ldLnJlc3BvbnNlX3RpbWVfdmFyaWVzX292ZXJfdGltZSk7CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXM0LmNoYXJ0TGlzdCA9IHJlc3BvbnNlX3RpbWVfdmFyaWVzX292ZXJfdGltZTsKCiAgICAgICAgICBpZiAoX3RoaXM0LmNoYXJ0TGlzdC5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIF90aGlzNC4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgIF90aGlzNC5pbml0Q2hhcnQoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CgogICAgICAgICAgbG9hZGluZy5jbG9zZSgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfdGhpczQuJG1lc3NhZ2UuZXJyb3IoZGF0YS5kYXRhLmVycm9yLm1lc3NhZ2UpOwoKICAgICAgICAgIGxvYWRpbmcuY2xvc2UoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMucGVyZm9ybWFuY2VfcmVwb3J0X2lkX2RhdGEgPSB0aGlzLnBlcmZvcm1hbmNlU2NyaXB0UmVwb3J0RGF0YTsKICAgIHRoaXMucGVyZm9ybWFuY2VSZXBvcnRTY3JpcHRJZCA9IHRoaXMucGVyZm9ybWFuY2VTY3JpcHRJZDsKICB9Cn07"},null]}