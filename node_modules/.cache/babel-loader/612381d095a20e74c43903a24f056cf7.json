{"remainingRequest":"D:\\VueAutomatedTestPlatform\\node_modules\\thread-loader\\dist\\cjs.js!D:\\VueAutomatedTestPlatform\\node_modules\\babel-loader\\lib\\index.js!D:\\VueAutomatedTestPlatform\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\VueAutomatedTestPlatform\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\VueAutomatedTestPlatform\\src\\components\\page\\uiAutomation\\uiElementOperation\\UiElementOperation.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\VueAutomatedTestPlatform\\src\\components\\page\\uiAutomation\\uiElementOperation\\UiElementOperation.vue","mtime":1652877133462},{"path":"D:\\VueAutomatedTestPlatform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652877126456},{"path":"D:\\VueAutomatedTestPlatform\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1652877132591},{"path":"D:\\VueAutomatedTestPlatform\\node_modules\\babel-loader\\lib\\index.js","mtime":1652877125945},{"path":"D:\\VueAutomatedTestPlatform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652877126456},{"path":"D:\\VueAutomatedTestPlatform\\node_modules\\vue-loader\\lib\\index.js","mtime":1652877132787}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}