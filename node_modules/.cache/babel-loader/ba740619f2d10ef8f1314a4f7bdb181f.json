{"remainingRequest":"E:\\test-platform-vue\\node_modules\\thread-loader\\dist\\cjs.js!E:\\test-platform-vue\\node_modules\\babel-loader\\lib\\index.js!E:\\test-platform-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\test-platform-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\test-platform-vue\\src\\components\\page\\uiElementOperation\\UiElementOperation.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\test-platform-vue\\src\\components\\page\\uiElementOperation\\UiElementOperation.vue","mtime":1650008441733},{"path":"E:\\test-platform-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650008434508},{"path":"E:\\test-platform-vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1650008440786},{"path":"E:\\test-platform-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1650008434007},{"path":"E:\\test-platform-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650008434508},{"path":"E:\\test-platform-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1650008440984}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgZ2V0VWlFbGVtZW50T3BlcmF0aW9uUmVxdWVzdCwgYWRkVWlFbGVtZW50T3BlcmF0aW9uUmVxdWVzdCwgZ2V0U2luZ2xlRWxlbWVudE9wZXJhdGlvblJlcXVlc3QsIHVwZGF0ZVVpRWxlbWVudE9wZXJhdGlvblJlcXVlc3QsIGRlbGV0ZVNpbmdsZUVsZW1lbnRPcGVyYXRpb25SZXF1ZXN0IH0gZnJvbSAiLi4vLi4vLi4vYXBpL3VpRWxlbWVudE9wZXJhdGlvbiI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnVWlFbGVtZW50T3BlcmF0aW9uJywKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdGFibGVEYXRhOiBbXSwKICAgICAgZWxlbWVudHNfb3BlcmF0aW9uX2Fzc29jaWF0ZWRfaW50ZXJmYWNlOiAiIiwKICAgICAgc2hvd0FwaV91cmw6IGZhbHNlLAogICAgICBjdXJyZW50UGFnZTogMywKICAgICAgLy8g5b2T5YmN6aG156CBCiAgICAgIHBhZ2VTaXplOiAxMCwKICAgICAgLy8g5q+P6aG15aSn5bCPCiAgICAgIHRvdGFsOiAxMDAwLAogICAgICBwYWdlOiB7CiAgICAgICAgcGFnZTogMSwKICAgICAgICB0b3RhbDogMCwKICAgICAgICBzaXplOiAxMAogICAgICB9LAogICAgICBhZGRVaUVsZW1lbnRPcGVyYXRpb25kaWFsb2dGb3JtVmlzaWJsZTogZmFsc2UsCiAgICAgIGVkaXRVaUVsZW1lbnRPcGVyYXRpb25kaWFsb2dGb3JtVmlzaWJsZTogZmFsc2UsCiAgICAgIGFkZFVpRWxlbWVudE9wZXJhdGlvbkRhdGE6IHsKICAgICAgICBlbGVtZW50c19vcGVyYXRpb25fZGVzY3JpYmU6ICIiLAogICAgICAgIGVsZW1lbnRzX29wZXJhdGlvbl90aXRsZTogIiIsCiAgICAgICAgZWxlbWVudHNfb3BlcmF0aW9uX25hbWU6ICIiLAogICAgICAgIGVsZW1lbnRzX29wZXJhdGlvbl9hcGlfdXJsOiAiIgogICAgICB9LAogICAgICBlZGl0VWlFbGVtZW50T3BlcmF0aW9uRGF0YTogewogICAgICAgIGVsZW1lbnRzX29wZXJhdGlvbl9kZXNjcmliZTogIiIsCiAgICAgICAgZWxlbWVudHNfb3BlcmF0aW9uX3RpdGxlOiAiIiwKICAgICAgICBlbGVtZW50c19vcGVyYXRpb25fbmFtZTogIiIsCiAgICAgICAgZWxlbWVudHNfb3BlcmF0aW9uX2FwaV91cmw6ICIiLAogICAgICAgIGlkOiAwCiAgICAgIH0sCiAgICAgIHVpRWxlbWVudE9wZXJhdGlvbklkOiAiIiwKICAgICAgdWlFbGVtZW50T3BlcmF0aW9uRGF0YTogIiIsCiAgICAgIHJ1bGVzOiB7CiAgICAgICAgZWxlbWVudHNfb3BlcmF0aW9uX3RpdGxlOiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAn6K+36L6T5YWlVUnlhYPntKDmk43kvZzlkI3np7AnLAogICAgICAgICAgdHJpZ2dlcjogJ2JsdXInCiAgICAgICAgfV0sCiAgICAgICAgZWxlbWVudHNfb3BlcmF0aW9uX25hbWU6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICfor7fovpPlhaVVSeWFg+e0oOaTjeS9nOaWueazlScsCiAgICAgICAgICB0cmlnZ2VyOiAnYmx1cicKICAgICAgICB9XQogICAgICB9CiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgYXNzb2NpYXRlZF9pbnRlcmZhY2Vfc3dpdGNoOiBmdW5jdGlvbiBhc3NvY2lhdGVkX2ludGVyZmFjZV9zd2l0Y2goZWxlbWVudHNfb3BlcmF0aW9uX2Fzc29jaWF0ZWRfaW50ZXJmYWNlKSB7CiAgICAgIGNvbnNvbGUubG9nKGVsZW1lbnRzX29wZXJhdGlvbl9hc3NvY2lhdGVkX2ludGVyZmFjZSk7CgogICAgICBpZiAoZWxlbWVudHNfb3BlcmF0aW9uX2Fzc29jaWF0ZWRfaW50ZXJmYWNlID09PSAndHJ1ZScpIHsKICAgICAgICB0aGlzLnNob3dBcGlfdXJsID0gdHJ1ZTsKICAgICAgfQoKICAgICAgaWYgKGVsZW1lbnRzX29wZXJhdGlvbl9hc3NvY2lhdGVkX2ludGVyZmFjZSA9PT0gJ2ZhbHNlJykgewogICAgICAgIHRoaXMuc2hvd0FwaV91cmwgPSBmYWxzZTsKICAgICAgfQogICAgfSwKICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gZm9ybWF0dGVyKHJvdywgY29sdW1uKSB7CiAgICAgIHJldHVybiByb3cuYWRkcmVzczsKICAgIH0sCiAgICBoYW5kbGVFZGl0OiBmdW5jdGlvbiBoYW5kbGVFZGl0KGluZGV4LCByb3cpIHsKICAgICAgY29uc29sZS5sb2coaW5kZXgsIHJvdyk7CiAgICB9LAogICAgaGFuZGxlRGVsZXRlOiBmdW5jdGlvbiBoYW5kbGVEZWxldGUoaW5kZXgsIHJvdykgewogICAgICBjb25zb2xlLmxvZyhpbmRleCwgcm93KTsKICAgIH0sCiAgICBoYW5kbGVTaXplQ2hhbmdlOiBmdW5jdGlvbiBoYW5kbGVTaXplQ2hhbmdlKHZhbCkgewogICAgICBjb25zb2xlLmxvZygi6ZW/5bqm5pS55Y+YOiIgKyB2YWwpOwogICAgfSwKICAgIGhhbmRsZUN1cnJlbnRDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZUN1cnJlbnRDaGFuZ2UodmFsKSB7CiAgICAgIGNvbnNvbGUubG9nKCLlvZPliY3mlLnlj5jvvJoiICsgdmFsKTsKICAgIH0sCiAgICAvL+iOt+WPluaJgOacieWFg+e0oOaTjeS9nOWIl+ihqAogICAgZ2V0VWlFbGVtZW50T3BlcmF0aW9uRnVuOiBmdW5jdGlvbiBnZXRVaUVsZW1lbnRPcGVyYXRpb25GdW4oKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgcmVxID0gewogICAgICAgIHBhZ2U6IHRoaXMucGFnZS5wYWdlLAogICAgICAgIHNpemU6IHRoaXMucGFnZS5zaXplCiAgICAgIH07CiAgICAgIGdldFVpRWxlbWVudE9wZXJhdGlvblJlcXVlc3QocmVxKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7CgogICAgICAgIGlmICh0cnVlID09PSBkYXRhLmRhdGEuc3VjY2VzcykgewogICAgICAgICAgX3RoaXMudGFibGVEYXRhID0gZGF0YS5kYXRhLmRhdGE7CiAgICAgICAgICBfdGhpcy5wYWdlLnRvdGFsID0gZGF0YS5kYXRhLmRhdGEudG90YWw7CiAgICAgICAgICBfdGhpcy5wYWdlLnBhZ2UgPSBkYXRhLmRhdGEuZGF0YS5wYWdlOwogICAgICAgICAgX3RoaXMucGFnZS5zaXplID0gZGF0YS5kYXRhLmRhdGEuc2l6ZTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMuJG1lc3NhZ2UuZXJyb3IoIuiOt+WPluaOpeWPo+Wksei0pSIpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8g5re75YqgVUnlhYPntKDmk43kvZwKICAgIGFkZFVpRWxlbWVudE9wZXJhdGlvbjogZnVuY3Rpb24gYWRkVWlFbGVtZW50T3BlcmF0aW9uKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciByZXEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuYWRkVWlFbGVtZW50T3BlcmF0aW9uRGF0YSkpOwogICAgICByZXEuZWxlbWVudHNfb3BlcmF0aW9uX2Fzc29jaWF0ZWRfaW50ZXJmYWNlID0gdGhpcy5lbGVtZW50c19vcGVyYXRpb25fYXNzb2NpYXRlZF9pbnRlcmZhY2U7CiAgICAgIHRoaXMuJHJlZnMuYWRkVWlFbGVtZW50T3BlcmF0aW9uRm9ybVJlZi52YWxpZGF0ZShmdW5jdGlvbiAodmFsaWQpIHsKICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgIC8vIOS7o+ihqOagoemqjOmAmui/hwogICAgICAgICAgYWRkVWlFbGVtZW50T3BlcmF0aW9uUmVxdWVzdChyZXEpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7CgogICAgICAgICAgICBpZiAodHJ1ZSA9PT0gZGF0YS5kYXRhLnN1Y2Nlc3MpIHsKICAgICAgICAgICAgICBfdGhpczIuZ2V0VWlFbGVtZW50T3BlcmF0aW9uRnVuKCk7CgogICAgICAgICAgICAgIF90aGlzMi5hZGRVaUVsZW1lbnRPcGVyYXRpb25kaWFsb2dGb3JtVmlzaWJsZSA9IGZhbHNlOwoKICAgICAgICAgICAgICBfdGhpczIuJG1lc3NhZ2Uuc3VjY2Vzcygi5Yib5bu6VUnlhYPntKDmk43kvZzmiJDlip8iKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBfdGhpczIuJG1lc3NhZ2UuZXJyb3IoIuWIm+W7ulVJ5YWD57Sg5pON5L2c5aSx6LSlIik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAvL+agoemqjOWksei0pQogICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAogICAgLy8g5re75Yqg5YWD57Sg5pON5L2cIOW8ueeqlwogICAgYWRkVWlFbGVtZW50T3BlcmF0aW9uUG9wdXA6IGZ1bmN0aW9uIGFkZFVpRWxlbWVudE9wZXJhdGlvblBvcHVwKCkgewogICAgICB0aGlzLmFkZFVpRWxlbWVudE9wZXJhdGlvbkRhdGEgPSB7CiAgICAgICAgZWxlbWVudHNfb3BlcmF0aW9uX2Rlc2NyaWJlOiAiIiwKICAgICAgICBlbGVtZW50c19vcGVyYXRpb25fdGl0bGU6ICIiLAogICAgICAgIGVsZW1lbnRzX29wZXJhdGlvbl9uYW1lOiAiIiwKICAgICAgICBlbGVtZW50c19vcGVyYXRpb25fYXBpX3VybDogIiIKICAgICAgfTsKICAgICAgdGhpcy5hZGRVaUVsZW1lbnRPcGVyYXRpb25kaWFsb2dGb3JtVmlzaWJsZSA9IHRydWU7CiAgICB9LAogICAgLy/nvJbovpHlhYPntKDmk43kvZwKICAgIGVkaXRVaUVsZW1lbnRPcGVyYXRpb246IGZ1bmN0aW9uIGVkaXRVaUVsZW1lbnRPcGVyYXRpb24oKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIHJlcSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5lZGl0VWlFbGVtZW50T3BlcmF0aW9uRGF0YSkpOwogICAgICByZXEuZWxlbWVudHNfb3BlcmF0aW9uX2Fzc29jaWF0ZWRfaW50ZXJmYWNlID0gdGhpcy5lbGVtZW50c19vcGVyYXRpb25fYXNzb2NpYXRlZF9pbnRlcmZhY2U7CiAgICAgIHRoaXMuJHJlZnMuZWRpdFVpRWxlbWVudE9wZXJhdGlvbkZvcm1SZWYudmFsaWRhdGUoZnVuY3Rpb24gKHZhbGlkKSB7CiAgICAgICAgY29uc29sZS5sb2coX3RoaXMzLnVpRWxlbWVudE9wZXJhdGlvbklkKTsKCiAgICAgICAgaWYgKHZhbGlkKSB7CiAgICAgICAgICAvLyDku6PooajmoKHpqozpgJrov4cKICAgICAgICAgIHVwZGF0ZVVpRWxlbWVudE9wZXJhdGlvblJlcXVlc3QoX3RoaXMzLnVpRWxlbWVudE9wZXJhdGlvbklkLCByZXEpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7CgogICAgICAgICAgICBpZiAodHJ1ZSA9PT0gZGF0YS5kYXRhLnN1Y2Nlc3MpIHsKICAgICAgICAgICAgICBfdGhpczMuZ2V0VWlFbGVtZW50T3BlcmF0aW9uRnVuKCk7CgogICAgICAgICAgICAgIF90aGlzMy5lZGl0VWlFbGVtZW50T3BlcmF0aW9uZGlhbG9nRm9ybVZpc2libGUgPSBmYWxzZTsKCiAgICAgICAgICAgICAgX3RoaXMzLiRtZXNzYWdlLnN1Y2Nlc3MoIue8lui+kVVJ5YWD57Sg5pON5L2c5oiQ5YqfIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgX3RoaXMzLiRtZXNzYWdlLmVycm9yKCLnvJbovpFVSeWFg+e0oOaTjeS9nOWksei0pSIpOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy/moKHpqozlpLHotKUKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIC8v57yW6L6R6aG555uu5by556qX5bm26I635Y+W5Y2V5Liq6aG555uuCiAgICBlZGl0VWlFbGVtZW50T3BlcmF0aW9uUG9wdXA6IGZ1bmN0aW9uIGVkaXRVaUVsZW1lbnRPcGVyYXRpb25Qb3B1cChkYXRhKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdGhpcy51aUVsZW1lbnRPcGVyYXRpb25JZCA9IGRhdGEuaWQ7CiAgICAgIHRoaXMudWlFbGVtZW50T3BlcmF0aW9uRGF0YSA9IGRhdGE7CiAgICAgIHRoaXMuZWRpdFVpRWxlbWVudE9wZXJhdGlvbmRpYWxvZ0Zvcm1WaXNpYmxlID0gdHJ1ZTsKICAgICAgY29uc29sZS5sb2coIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iKTsKICAgICAgY29uc29sZS5sb2codGhpcy51aUVsZW1lbnRPcGVyYXRpb25JZCk7CiAgICAgIGNvbnNvbGUubG9nKHRoaXMudWlFbGVtZW50T3BlcmF0aW9uRGF0YSk7CiAgICAgIGdldFNpbmdsZUVsZW1lbnRPcGVyYXRpb25SZXF1ZXN0KHRoaXMudWlFbGVtZW50T3BlcmF0aW9uSWQpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTsKCiAgICAgICAgaWYgKHRydWUgPT09IGRhdGEuZGF0YS5zdWNjZXNzKSB7CiAgICAgICAgICBfdGhpczQuZWRpdFVpRWxlbWVudE9wZXJhdGlvbkRhdGEuZWxlbWVudHNfb3BlcmF0aW9uX3RpdGxlID0gZGF0YS5kYXRhLmRhdGEuZWxlbWVudHNfb3BlcmF0aW9uX3RpdGxlOwogICAgICAgICAgX3RoaXM0LmVkaXRVaUVsZW1lbnRPcGVyYXRpb25EYXRhLmVsZW1lbnRzX29wZXJhdGlvbl9uYW1lID0gZGF0YS5kYXRhLmRhdGEuZWxlbWVudHNfb3BlcmF0aW9uX25hbWU7CiAgICAgICAgICBfdGhpczQuZWRpdFVpRWxlbWVudE9wZXJhdGlvbkRhdGEuZWxlbWVudHNfb3BlcmF0aW9uX2Rlc2NyaWJlID0gZGF0YS5kYXRhLmRhdGEuZWxlbWVudHNfb3BlcmF0aW9uX2Rlc2NyaWJlOwogICAgICAgICAgX3RoaXM0LmVkaXRVaUVsZW1lbnRPcGVyYXRpb25EYXRhLmlkID0gZGF0YS5kYXRhLmRhdGEuaWQ7CiAgICAgICAgICBfdGhpczQuZWRpdFVpRWxlbWVudE9wZXJhdGlvbkRhdGEuZWxlbWVudHNfb3BlcmF0aW9uX2FwaV91cmwgPSBkYXRhLmRhdGEuZGF0YS5lbGVtZW50c19vcGVyYXRpb25fYXBpX3VybDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXM0LiRtZXNzYWdlLmVycm9yKCLojrflj5bmjqXlj6PlpLHotKUiKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIC8v5Yig6Zmk5Y2V5Liq6aG555uuCiAgICBkZWxldGVVaUVsZW1lbnRPcGVyYXRpb25Qb3B1cDogZnVuY3Rpb24gZGVsZXRlVWlFbGVtZW50T3BlcmF0aW9uUG9wdXAoZGF0YSkgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHRoaXMudWlFbGVtZW50T3BlcmF0aW9uSWQgPSBkYXRhLmlkOwogICAgICBjb25zb2xlLmxvZyh0aGlzLnVpRWxlbWVudE9wZXJhdGlvbklkKTsKICAgICAgZGVsZXRlU2luZ2xlRWxlbWVudE9wZXJhdGlvblJlcXVlc3QodGhpcy51aUVsZW1lbnRPcGVyYXRpb25JZCkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGNvbnNvbGUubG9nKGRhdGEpOwoKICAgICAgICBpZiAodHJ1ZSA9PT0gZGF0YS5kYXRhLnN1Y2Nlc3MpIHsKICAgICAgICAgIF90aGlzNS5nZXRVaUVsZW1lbnRPcGVyYXRpb25GdW4oKTsKCiAgICAgICAgICBfdGhpczUuJG1lc3NhZ2Uuc3VjY2Vzcygi5Yig6ZmkVUnlrprkvY3miJDlip8iKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXM1LiRtZXNzYWdlLmVycm9yKCLliKDpmaRVSeWumuS9jeWksei0pSIpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5nZXRVaUVsZW1lbnRPcGVyYXRpb25GdW4oKTsKICB9Cn07"},null]}