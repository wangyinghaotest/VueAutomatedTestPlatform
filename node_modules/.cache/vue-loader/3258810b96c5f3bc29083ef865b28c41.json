{"remainingRequest":"D:\\VueAutomatedTestPlatform\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\VueAutomatedTestPlatform\\src\\components\\page\\uiAutomation\\uiPage\\UiPage.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\VueAutomatedTestPlatform\\src\\components\\page\\uiAutomation\\uiPage\\UiPage.vue","mtime":1652877133463},{"path":"D:\\VueAutomatedTestPlatform\\node_modules\\babel-loader\\lib\\index.js","mtime":1652877125945},{"path":"D:\\VueAutomatedTestPlatform\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1652877126456},{"path":"D:\\VueAutomatedTestPlatform\\node_modules\\vue-loader\\lib\\index.js","mtime":1652877132787}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}